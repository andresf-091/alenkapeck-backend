"""add user roles

Revision ID: 695cfb8185fa
Revises: 5bf995fd0f2d
Create Date: 2025-07-26 00:09:01.228361

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "695cfb8185fa"
down_revision: Union[str, Sequence[str], None] = "5bf995fd0f2d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("users", sa.Column("role", sa.String(), nullable=False))

    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto")

    # Создаём временный UUID столбец
    op.add_column("users", sa.Column("uuid", sa.UUID(), nullable=True))

    # Генерируем UUID для каждой строки - УПРОЩЕННЫЙ ВАРИАНТ
    op.execute("UPDATE users SET uuid = gen_random_uuid()")

    # Делаем новый столбец обязательным
    op.alter_column("users", "uuid", nullable=False)

    # Удаляем старый id
    op.drop_constraint("users_pkey", "users", type_="primary")
    op.drop_column("users", "id")

    # Переименовываем uuid в id
    op.alter_column("users", "uuid", new_column_name="id")

    # Создаём новый первичный ключ
    op.create_primary_key("users_pkey", "users", ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("users_pkey", "users", type_="primary")
    op.alter_column("users", "id", new_column_name="uuid")
    op.add_column(
        "users", sa.Column("id", sa.Integer(), autoincrement=True, nullable=False)
    )
    op.create_primary_key("users_pkey", "users", ["id"])
    op.drop_column("users", "uuid")

    op.drop_column("users", "role")
    # ### end Alembic commands ###
